{"version":3,"sources":["webpack:///./src/app/login/login.component.html","webpack:///./src/groups/list/list.component.css","webpack:///./src/app/app.component.css","webpack:///./src/post/user-list/user-list.component.html","webpack:///./src/groups/form/form.component.html","webpack:///./src/groups/detail/detail.component.html","webpack:///./src/post/detail/detail.component.css","webpack:///./src/post/list/list.component.css","webpack:///./src/groups/list/list.component.html","webpack:///./src/groups/form/form.component.css","webpack:///./src/app/homepage/homepage.component.css","webpack:///./src/post/form/form.component.html","webpack:///./src/app/homepage/homepage.component.html","webpack:///./src/post/post/post.component.css","webpack:///./src/app/logout/logout.component.html","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/groups/detail/detail.component.css","webpack:///./src/post/list/list.component.html","webpack:///./src/post/user-list/user-list.component.css","webpack:///./src/app/login/login.component.css","webpack:///./src/app/app.component.html","webpack:///./src/post/post/post.component.html","webpack:///./src/app/logout/logout.component.css","webpack:///./src/post/detail/detail.component.html","webpack:///./src/post/form/form.component.css","webpack:///./src/post/post/post.component.ts","webpack:///./src/post/user-list/user-list.component.ts","webpack:///./src/app/shared/data.service.ts","webpack:///./src/groups/shared/group.data.service.ts","webpack:///./src/post/shared/postdata.service.ts","webpack:///./src/post/list/list.component.ts","webpack:///./src/post/form/form.component.ts","webpack:///./src/post/post-routing.modules.ts","webpack:///./src/post/detail/detail.component.ts","webpack:///./src/post/post.module.ts","webpack:///./src/app/shared/authentication.guard.ts","webpack:///./src/groups/form/form.component.ts","webpack:///./src/groups/detail/detail.component.ts","webpack:///./src/groups/list/list.component.ts","webpack:///./src/groups/group-routing.module.ts","webpack:///./src/groups/groups.module.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/homepage/homepage.component.ts","webpack:///./src/app/logout/logout.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["module","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","post_component_PostComponent","PostComponent","prototype","ngOnInit","__decorate","Object","core","selector","user_list_component_UserListComponent","UserListComponent","this","posts","user_list_component_decorate","data_service_DataService","DataService","http","router","loggedinUserToken","userName","isUserLoggedIn","Subject","next","getUserName","Authorized","getLoggedInUserToken","length","localStorage","getItem","setLoginTokenandUsername","username","token","setItem","getCSRFToken","document","cookie","split","forEach","ele","data","trim","toLowerCase","login","email","password","_this","get","subscribe","navigate","error","post","headers","X-CSRFToken","non_field_errors","alert","logout","Authorization","removeItem","register","password1","password2","type","data_service_decorate","providedIn","fesm5_http","fesm5_router","group_data_service_GroupDataService","GroupDataService","authentication","getGroups","getGroup","toString","createGroup","name","description","updateGroup","groupid","put","leaveGroup","delete","deleteGroup","groupId","addMember","csrfmiddlewaretoken","group","user","group_data_service_decorate","postdata_service_PostdataService","PostdataService","groupDataService","getPostList","pipe","map","grouplist","adminUser","index","members","findIndex","ele1","push","createPost","message","postdata_service_decorate","list_component_ListComponent","ListComponent","postDataService","usergroups","othergroups","isUserAuthenticated","list_component_decorate","form_component_FormComponent","FormComponent","route","groupsList","displaySuccessMessage","params","selectedGroupId","postForm","fesm5_forms","Message","Group","setValue","updatePost","value","setTimeout","console","log","form_component_decorate","routes","path","component","post_routing_modules_PostRoutingModule","PostRoutingModule","post_routing_modules_decorate","imports","forChild","detail_component_DetailComponent","DetailComponent","postService","loggedInUserEmail","deletePost","detail_component_decorate","post_module_PostModule","PostModule","post_module_decorate","declarations","common","authentication_guard_AuthenticationGuard","AuthenticationGuard","authService","canActivate","state","authentication_guard_decorate","form_form_component_FormComponent","groupService","createGroupForm","onCreate","form","form_form_component_decorate","detail_detail_component_DetailComponent","service","userInCurrentGroup","detail","loggedInUserName","element","isLoggedInUserAdmin","event","preventDefault","success","joinGroup","confirm","detail_detail_component_decorate","list_list_component_ListComponent","userIsAuthenticated","groups","loadTheGroup","list_list_component_decorate","group_routing_module_routes","group_routing_module_GroupRoutingModule","GroupRoutingModule","group_routing_module_decorate","groups_module_GroupsModule","GroupsModule","groups_module_decorate","providers","login_component_LoginComponent","LoginComponent","registerView","param","registerForm","loginForm","onRegister","onLogin","login_component_decorate","homepage_component_HomepageComponent","HomepageComponent","homepage_component_decorate","logout_component_LogoutComponent","LogoutComponent","logout_component_decorate","app_routing_module_routes","redirectTo","pathMatch","app_routing_module_AppRoutingModule","AppRoutingModule","app_routing_module_decorate","forRoot","useHash","app_component_AppComponent","AppComponent","title","isAuthenticated","app_component_decorate","app_module_AppModule","AppModule","app_module_decorate","platform_browser","bootstrap","platform_browser_dynamic","bootstrapModule","catch","err"],"mappings":"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","file":"main.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\">\\n <div *ngIf=\\\"registerView\\\" class=\\\"justify-content-center\\\">\\n    <h1>Sign Up</h1>\\n    <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegister(registerForm)\\\">\\n      <label>Username:\\n        <input type=\\\"text\\\" formControlName=\\\"username\\\"/>\\n      </label>\\n      <label>Email\\n        <input type=\\\"email\\\" formControlName=\\\"email\\\"/>\\n      </label>\\n      <label> Password \\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" >\\n      </label>\\n      <label> confirm Password\\n        <input type=\\\"password\\\" formControlName=\\\"password1\\\">\\n      </label>\\n      <button type=\\\"submit\\\" [disabled]=\\\"!registerForm?.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"!registerView\\\" class=\\\"justify-content-center\\\">\\n    <h1>Login</h1>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onLogin(loginForm)\\\">\\n      <label> Username or Email\\n        <input type=\\\"text\\\" formControlName=\\\"username\\\">\\n      </label>\\n      <label> Password\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\"/>\\n      </label>\\n      <button type=\\\"submit\\\" [disabled]=\\\"!loginForm?.valid\\\">Login</button>\\n      <button type=\\\"button\\\" (onclick)=\\\"registerView=true\\\">Register</button>\\n    </form>\\n    \\n  </div>\\n</div>\\n\"","module.exports = \".list-group-item{\\r\\n    text-decoration: none;\\r\\n    color:black;\\r\\n}\\r\\n\\r\\n.list-group-item:hover{\\r\\n    cursor: default;\\r\\n}\\r\\n\\r\\n.title{\\r\\n    color:blue;\\r\\n    text-decoration: underline;\\r\\n}\\r\\n\\r\\n.title:hover{\\r\\n    cursor:pointer;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ncm91cHMvbGlzdC9saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxzQkFBc0I7SUFDdEIsWUFBWTtDQUNmOztBQUVEO0lBQ0ksZ0JBQWdCO0NBQ25COztBQUVEO0lBQ0ksV0FBVztJQUNYLDJCQUEyQjtDQUM5Qjs7QUFFRDtJQUNJLGVBQWU7Q0FDbEIiLCJmaWxlIjoic3JjL2dyb3Vwcy9saXN0L2xpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5saXN0LWdyb3VwLWl0ZW17XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbTpob3ZlcntcclxuICAgIGN1cnNvcjogZGVmYXVsdDtcclxufVxyXG5cclxuLnRpdGxle1xyXG4gICAgY29sb3I6Ymx1ZTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG59XHJcblxyXG4udGl0bGU6aG92ZXJ7XHJcbiAgICBjdXJzb3I6cG9pbnRlcjtcclxufSJdfQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"post=-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <h1>@Place Post username</h1>\\n      </div>\\n      <div class=\\\"col-md-8\\\">\\n        <post-detail *ngFor=\\\"let post of posts\\\" [post]=\\\"post\\\"></post-detail>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h4 *ngIf = \\\"type=='create'\\\">Create New Group</h4>\\n        <h4 *ngIf = \\\"type=='update'\\\">Update Group</h4>\\n        <form  [formGroup]=\\\"createGroupForm\\\" (ngSubmit)=\\\"onCreate(createGroupForm)\\\">\\n            <label>Name:\\n              <input type=\\\"text\\\" formControlName=\\\"name\\\"/>\\n            </label>\\n            <label>Description\\n              <input type=\\\"text\\\" formControlName=\\\"description\\\"/>\\n            </label>\\n            <!--Create a drop down for selecting members-->\\n            <input type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Submit\\\">\\n        </form>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"displaySuccessMessage\\\">\\n      <div class=\\\"col-md-12 success\\\">\\n        <h1>Success fully {{type}}ed</h1>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <!--Group Name from backend-->\\n        <div class=\\\"col-md-8\\\">\\n          <h1> {{group?.name}} </h1>\\n          <br>\\n          <h2>Member Count : {{group?.members?.length}}</h2>\\n          <br>\\n          <div class=\\\"content\\\">\\n            <ng-template [ngIf]=\\\"userInCurrentGroup\\\">\\n              <!-- pass group slug to leave url-->\\n              <button (click)=\\\"leaveGroup(group.id,$event)\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Group Leave <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </button>\\n              <a *ngIf=\\\"isLoggedInUserAdmin()\\\" [routerLink]=\\\"['../../../','group','update',{'id':group.id}]\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Group Update <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </a>\\n              <a *ngIf=\\\"isLoggedInUserAdmin()\\\" [routerLink]=\\\"['../../../','post','create',{'id':group.id},{'type':'create'}]\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Post In Group <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </a>\\n              <button (click)=\\\"deleteGroup(group.id)\\\" class = \\\"btn btn-lg btn-fill btn-danger\\\"> \\n                Group Delete <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </button>\\n            </ng-template>\\n            <ng-template [ngIf]=\\\"!userInCurrentGroup\\\">\\n              <!-- pass group slug to join url-->\\n              <button  class = \\\"btn btn-lg btn-fill btn-warning\\\" (click)=\\\"joinGroup(group.id)\\\"> \\n                  Group Join <span class=\\\"glyphicon glyphicon-ok-circle\\\"></span>\\n              </button>\\n            </ng-template>\\n          </div>\\n        </div>\\n\\n      <div class=\\\"row\\\">\\n        <div class = \\\"col-md-8\\\">\\n          <ul *ngIf=\\\"posts.length > 0;else noPostMessage\\\">\\n              <post-list></post-list>\\n          </ul>\\n          <ng-template #noPostMessage>\\n            <h2>No posts in this group yet!</h2>\\n          </ng-template>          \\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".post{\\r\\n    border: 2px solid black;\\r\\n    display: block;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wb3N0L2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHdCQUF3QjtJQUN4QixlQUFlO0NBQ2xCIiwiZmlsZSI6InNyYy9wb3N0L2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3N0e1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufSJdfQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC9saXN0L2xpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <div class=\\\"content\\\">\\n            <ng-template [ngIf]=\\\"userIsAuthenticated\\\">\\n              <h2>Welcome Back!</h2>\\n              <!-- take to posts of the user on click-->\\n              <a href=\\\"\\\">\\n                @{{username}}\\n              </a>\\n            </ng-template>\\n            <h2>Groups</h2>\\n            <p>Welcome to the groups page!</p>\\n            <ng-template [ngIf]=\\\"userIsAuthenticated\\\">\\n              <!--Take user to create Group form-->\\n                <a [routerLink]=\\\"['create']\\\" routerLinkActive=\\\"router-link-active\\\"  class=\\\"btn btn-md btn-fill btn-warning\\\">\\n                  <span class=\\\"glyphicon glyphicon-plus-sign\\\">Create New Group!</span>\\n                </a>\\n            </ng-template>\\n        </div>\\n      </div>\\n      <div class = col-md-8>\\n        <div class=\\\"list-group\\\">\\n          <ng-template [ngIf]=\\\"groups.length > 0\\\">\\n            <!--Link to that group detail page-->\\n            <a *ngFor=\\\"let group of groups\\\" class=\\\"list-group-item\\\">\\n              <h3 (click) = \\\"loadTheGroup(group.id)\\\"class=\\\"title list-group-item-heading\\\">{{group.name}}</h3>\\n              <div class=\\\"list-group-item-text container-fluid\\\">\\n                <h5>Description:</h5>\\n                {{group.description}}\\n              </div>\\n              <br>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-4\\\">\\n                  Total Members : <span class=\\\"badge\\\">{{group.members.length}}</span>                  \\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                  Total Posts : <span class='badge'>Group posts count need to be put</span>                  \\n                </div>\\n              </div>\\n            </a>\\n          </ng-template>      \\n        </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".success{\\r\\n    color:green;\\r\\n    background-color:lightgreen;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ncm91cHMvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osNEJBQTRCO0NBQy9CIiwiZmlsZSI6InNyYy9ncm91cHMvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VjY2Vzc3tcclxuICAgIGNvbG9yOmdyZWVuO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjpsaWdodGdyZWVuO1xyXG59Il19 */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWVwYWdlL2hvbWVwYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"post-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h4 *ngIf=\\\"type=='create'\\\"> Create a new post</h4>\\n        <h4 *ngIf=\\\"type=='update'\\\"> Update post </h4>\\n        <form [formGroup]='postForm' (submit)=\\\"createPost(postForm)\\\">\\n          <label>Message</label>\\n          <br>\\n          <input type=\\\"text\\\" formControlName=\\\"Message\\\">\\n          <br>\\n          <label *ngIf=\\\"type=='create'\\\"> Select the Group</label>\\n          <select *ngIf=\\\"type=='create'\\\" class=\\\"custom-select\\\" formControlName=\\\"Group\\\">\\n            <option selected value=\\\"0\\\">Choose Group</option>\\n            <option *ngFor=\\\"let group of groupsList\\\" value=\\\"{{group.id}}\\\">{{group.name}}</option>\\n          </select>\\n          <br>\\n          <input type=\\\"submit\\\" value=\\\"Post\\\" class=\\\"btn btn-primary btn-large\\\">\\n        </form>\\n      </div>      \\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"displaySuccessMessage\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h1>Success fully created</h1>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"<h1> Welcome to Star Social!</h1>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC9wb3N0L3Bvc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"\\n<h1> Thanks for visiting, come back soon! </h1>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvZ3JvdXBzL2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"post=-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <div class=\\\"card card-with-shaddow\\\">\\n          <div class=\\\"content\\\">\\n            <h5 class=\\\"title\\\">Your Groups</h5>\\n            <ul class=\\\"list-unstyled\\\">\\n              <li *ngFor=\\\"let group of usergroups\\\" class='group li-with-bullet'> \\n                <a [routerLink]=\\\"['../','group',group.id,'detail']\\\">{{ group.name }}</a>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n        <div class=\\\"card ard-with-shadow\\\">\\n          <div class=\\\"content\\\">\\n            <h5 class='title'>All Groups</h5>\\n            <ul class='list-unstyled'>\\n              <li *ngFor=\\\"let group of othergroups\\\" class='group li-with-bullet'>\\n                <a [routerLink]=\\\"['../','group',group.id,'detail']\\\">{{ group.name }}</a>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-8\\\">\\n        <post-detail *ngFor=\\\"let post of posts\\\" [post]=\\\"post\\\"></post-detail>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Add A model to display confirm delete -->\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC91c2VyLWxpc3QvdXNlci1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<nav class='navbar navbar-expand-lg  navbar-light bg-light mynav' role='navigation' id='navbar'>\\n    <div class=\\\"container\\\">\\n        <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/home']\\\"> Star  Social </a> \\n        <ul class=\\\"nav navbar-nav navbar-right\\\">\\n            <ng-template [ngIf]=\\\"isAuthenticated\\\">\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['post']\\\">Post</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" [routerLink]=\\\"['group']\\\">Groups</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" [routerLink]=\\\"['group','create']\\\">Create Group</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" (click)=\\\"logout()\\\">Logout</a></li>\\n            </ng-template>\\n            <ng-template [ngIf]=\\\"!isAuthenticated\\\">\\n                <li class=\\\"nav-item\\\"><a  class=\\\"nav-link\\\" [routerLink]=\\\"['group']\\\">Groups</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['login',{'type':'login'}]\\\">Log In</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['login',{'type':'signup'}]\\\">Sign Up</a></li>\\n            </ng-template>\\n        </ul>\\n    </div>\\n</nav>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"<div class=\\\"post-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <post-detail></post-detail>\\n      </div>\\n    </div>\\n  </div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ291dC9sb2dvdXQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"post media\\\">\\n          <h3>{{ post.message }}</h3>\\n          <div class=\\\"media-body\\\">            \\n            <h5 class=\\\"media-heading\\\">\\n              <span class=\\\"username\\\">\\n                <a [routerLink]=\\\"['post',post.userusername,'userlist']\\\"><strong> {{ post.user.username }}</strong></a>\\n              </span>\\n              <time class=\\\"time\\\">\\n                {{ post.created_at }}\\n              </time>\\n            </h5>\\n            <div class=\\\"media-footer\\\">\\n                <a *ngIf=\\\"isUserAuthenticated && post.user.email == loggedInUserEmail\\\" (click)=\\\"deletePost(post.id)\\\" class=\\\"btn btn-large btn-simple\\\">\\n                  <span class=\\\"text-danger icon-label\\\">Delete</span>\\n                </a>\\n                <a *ngIf=\\\"isUserAuthenticated && post.user.email == loggedInUserEmail\\\"  [routerLink]=\\\"['../','post','create',{'id':post.group.id,'type':'update'}]\\\"  class=\\\"btn btn-large btn-simple\\\">\\n                  <span class=\\\"text-warning icon-label\\\">Update</span>\\n                </a>\\n            </div>\\n          </div>\\n</div>\\n    \"","module.exports = \".btn {\\r\\n    margin-top:15px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wb3N0L2Zvcm0vZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0NBQ25CIiwiZmlsZSI6InNyYy9wb3N0L2Zvcm0vZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0biB7XHJcbiAgICBtYXJnaW4tdG9wOjE1cHg7XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})\nexport class PostComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'post-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css']\n})\nexport class UserListComponent implements OnInit {\n\n  posts:any = []\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private loggedinUserToken:string = '';\n  private userName:string ='';\n  public isUserLoggedIn:Subject<boolean> = new Subject<boolean>();\n  constructor(private http:HttpClient,private router:Router) { \n    this.isUserLoggedIn.next(false);\n  }\n\n  public getUserName():string{\n    return this.userName;\n  }\n  public Authorized():boolean{\n    this.getLoggedInUserToken();\n    this.isUserLoggedIn.next(this.loggedinUserToken.length > 0);\n    return this.loggedinUserToken.length > 0 ?  true: false;\n  }\n\n  public getLoggedInUserToken():string{\n    this.loggedinUserToken = localStorage.getItem('userToken') ? localStorage.getItem('userToken') : this.loggedinUserToken;\n    this.userName = localStorage.getItem('username') ? localStorage.getItem('username') : this.userName;\n    return this.loggedinUserToken;\n  }\n  \n  private setLoginTokenandUsername(username:string,token:string){\n      this.loggedinUserToken='Token '+token;\n      localStorage.setItem('userToken',this.loggedinUserToken);\n      this.userName = username;\n      localStorage.setItem('username',username);\n  }\n\n  public getCSRFToken():string{\n    document.cookie.split(';').forEach( ele => {\n      let data = ele.split(\"=\");\n      if(data[0].trim().toLowerCase()=='csrftoken'){\n       return data[1];\n      }\n   });\n   return \"\";\n  }\n\n  public login(email:string,password:string){\n    let cookie = this.getCSRFToken();   \n    this.http.get('api/get-token?username='+email).subscribe((data:any) => {\n      this.isUserLoggedIn.next(true);\n      this.setLoginTokenandUsername(email,data.token);\n      this.router.navigate(['home']);\n    },\n    (error) => {\n      this.http.post('api/login/',{\n        'email':email,\n        'password':password\n      },{\n        headers:{\n          'X-CSRFToken': cookie\n        }\n      }).subscribe((data:any) => {\n        this.isUserLoggedIn.next(true);\n        this.setLoginTokenandUsername(email,data.token);\n        this.router.navigate(['home']);\n      },(error)=>{\n        if(error.error.non_field_errors && error.error.non_field_errors.length > 0){\n          alert(error.error.non_field_errors[0]);\n        }\n        else if(error.error.email && error.error.email.length > 0){\n          alert(error.error.email[0]);\n        }\n        else if(error.error.password && error.error.password.length > 0){\n          alert(error.error.password[0])\n        }\n      });\n    });    \n  }\n\n  public logout(){\n    this.http.get('/api/user/logout/',{\n      headers:{\n        'Authorization':this.loggedinUserToken\n      }\n    }).subscribe(() => {\n      this.loggedinUserToken = '';\n      localStorage.removeItem('userToken');\n      this.isUserLoggedIn.next(false);\n      this.router.navigate(['logout']);\n    });\n  }\n\n  public register(email,username,password1,password2){\n    let cookie = this.getCSRFToken();\n    this.http.post('api/user/',\n    {\n      \"username\":username,\n      \"email\":email,\n      \"password\":password1,\n      \"password2\":password2\n    },\n    {\n      headers:\n      {\n        'X-CSRFToken': cookie\n      }\n    }).subscribe(()=>{\n      this.router.navigate(['login',{'type':'login'}]);\n    },\n    (error)=>{\n      alert(error);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Group } from './group.interface';\r\nimport { DataService } from 'src/app/shared/data.service';\r\n@Injectable()\r\nexport class GroupDataService {\r\n  loggedinUserToken:string = '';\r\n  constructor(private http:HttpClient,private authentication:DataService) { }\r\n\r\n  public getGroups():Observable<Group[]>{\r\n    return this.http.get<Group[]>(\"api/group-list/\");\r\n  }\r\n\r\n  public getGroup(id:number):Observable<Group>{\r\n      return this.http.get<Group>('api/group/'+id.toString()+'/',{headers:{'Authorization':this.authentication.getLoggedInUserToken()}});\r\n  }\r\n\r\n  public createGroup(name:string, description:string):Observable<any>{\r\n     return this.http.post<any>('api/group/',\r\n     {\r\n         'name':name,\r\n         'description':description\r\n     },\r\n     {\r\n         headers:{\r\n             'Authorization':this.authentication.getLoggedInUserToken()\r\n            }\r\n    });\r\n  }\r\n\r\n  public updateGroup(groupid:number, name:string=\"\", description:string=\"\"):Observable<any>{\r\n    return this.http.put<any>('api/group/'+groupid+\"/\",\r\n    {\r\n        'name':name,\r\n        'description':description\r\n    },\r\n    {\r\n        headers:{\r\n            'Authorization':this.authentication.getLoggedInUserToken()\r\n           }\r\n   });\r\n }\r\n  public leaveGroup(groupid:number):Observable<any>{    \r\n    return this.http.delete<any>('api/group/'+groupid.toString()+'/deletemember/1/',\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n\r\n  public deleteGroup(groupId:number):Observable<any>{\r\n    return this.http.delete<any>('api/group/'+groupId.toString()+'/',\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n  \r\n  public addMember(groupid:number):Observable<any>{\r\n    return this.http.post<any>('api/add-member',{\r\n      'csrfmiddlewaretoken': this.authentication.getCSRFToken(),\r\n      'group':groupid,\r\n      'user':this.authentication.getUserName()\r\n    },\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { GroupDataService } from './../../groups/shared/group.data.service';\nimport { Post } from './post.interface';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DataService } from 'src/app/shared/data.service';\nimport { map } from 'rxjs/operators';\nimport { Group } from 'src/groups/shared/group.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostdataService {\n\n  constructor(\n    private http:HttpClient,\n    private authentication:DataService,\n    private groupDataService:GroupDataService) { }\n\n  public getPostList():Observable<Post[]>{\n    return this.http.get<Post[]>(\"api/post/\",{\n      headers: {\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n\n  public getGroups(){    \n    return this.groupDataService.getGroups().pipe(map((data:Group[])=>{\n      let grouplist = []\n      data.forEach(ele=>{\n        let user= null;\n        if (ele.adminUser.email == this.authentication.getUserName()){\n          user= ele.adminUser;\n        }else {\n          let index = ele.members.findIndex((ele1)=>{return ele1.email == this.authentication.getUserName();});\n          if(index > -1){\n              user = ele.members[index];\n          }\n        }\n        grouplist.push({\"id\":ele.id,\"name\":ele.name,\"user\":user});\n      });\n      return grouplist;\n    }));\n  }\n\n\n  public createPost(groupId:number, message:string){\n    return this.http.post<any>('api/post-create/',{\n      \"group\":groupId,\n      \"message\":message\n    },\n    {\n      headers:{\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n}\n","import { PostdataService } from '../shared/postdata.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Post } from '../shared/post.interface';\n\n@Component({\n  selector: 'post-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  public usergroups:any = [];\n  public posts:Post[] = [];\n  public othergroups:any = [];\n  isUserAuthenticated:boolean = true;\n\n  constructor(private postDataService:PostdataService) { \n    \n  }\n\n  ngOnInit() {\n    this.postDataService.getPostList().subscribe((data:Post[])=>{\n      this.posts = data;\n    })\n    this.postDataService.getGroups().subscribe((data)=>{\n        data.forEach((ele)=>{\n          if(ele.user != null){\n          this.usergroups.push(ele);\n          }else{\n            this.othergroups.push(ele);\n          }\n        })\n    });\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Group } from './../../groups/shared/group.interface';\nimport { PostdataService } from './../shared/postdata.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Form,FormGroup,FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'post-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  postForm:FormGroup;\n  groupsList:any = [];\n  selectedGroupId:number;\n  type:string;  \n  public displaySuccessMessage:boolean = false;\n\n  constructor(\n    private postDataService:PostdataService,\n    private route:ActivatedRoute,\n    private router:Router\n    ) {\n    this.route.params.subscribe(data => { \n      this.selectedGroupId = data['id'];\n      if(data['type']){\n        this.type = data['type'];\n      }\n    });\n   }\n\n  ngOnInit() {\n    this.postDataService.getGroups().subscribe(data => {\n      data.forEach((ele)=>{\n        if(ele.user != null){\n          this.groupsList.push(ele);\n        }\n      })\n    });\n\n    this.postForm = new FormGroup({\n      Message: new FormControl(),\n      Group:new FormControl()\n    })\n\n    this.postForm.get('Group').setValue(this.selectedGroupId ? this.selectedGroupId : 0);\n  }\n\n  public createPost(post:FormGroup){\n    if(this.type=='update'){\n      this.updatePost(post);\n    }else{\n      this.postDataService.createPost(post.value.Group, post.value.Message).subscribe(()=>{\n        this.displaySuccessMessage = true;\n        setTimeout(()=>{\n          this.displaySuccessMessage = false;\n          this.router.navigate(['post']);\n        },5000)\n      },\n      (error)=>{\n        if(error.error['group']){\n          alert(error.error['group']);\n        }else if(error.error['message']){\n          alert(error.error['message']);\n        }else{\n          alert(error.error);\n        }\n      });\n    }\n  }\n\n  public updatePost(post:FormGroup){\n    console.log(post.value.Message);\n    console.log(this.selectedGroupId);\n  }\n}\n","import { PostComponent } from './post/post.component';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormComponent } from './form/form.component';\r\n\r\n// Add gaurds for authentication\r\nconst routes:Routes = [\r\n    {path:'post',component:ListComponent},\r\n    {path:'post/:id/detail',component:PostComponent},\r\n    {path:'post/:name/userlist',component:UserListComponent},\r\n    {path:'post/create', component:FormComponent},//add gaurd\r\n    {path:'post/:id/update', component:FormComponent}//add gaurd\r\n]\r\n\r\n@NgModule({\r\n    imports:[\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports:[RouterModule]\r\n})\r\n\r\nexport class PostRoutingModule{}","import { DataService } from 'src/app/shared/data.service';\nimport { PostdataService } from './../shared/postdata.service';\nimport { Post } from './../shared/post.interface';\nimport { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'post-detail',\n  templateUrl: './detail.component.html',\n  styleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\n\n  @Input() post:Post;\n  public isUserAuthenticated:boolean = false;\n  public loggedInUserEmail:string = \"\";\n  constructor(private postService:PostdataService,private authentication:DataService) {\n    this.isUserAuthenticated = this.authentication.Authorized();\n    this.loggedInUserEmail = this.authentication.getUserName();\n    this.authentication.isUserLoggedIn.subscribe((data:boolean) => {\n      this.isUserAuthenticated = data;\n      console.log(this.isUserAuthenticated);\n    });\n   }\n\n  ngOnInit() {\n  }\n\n  public deletePost(id){\n    console.log(id);\n  }\n}\n","import { PostRoutingModule } from './post-routing.modules';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DetailComponent } from './detail/detail.component';\nimport { ListComponent } from './list/list.component';\nimport { FormComponent } from './form/form.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { PostComponent } from './post/post.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [DetailComponent, ListComponent, FormComponent, UserListComponent, PostComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    PostRoutingModule,\n  ],\n  exports: [\n    ListComponent\n  ]\n})\nexport class PostModule { }\n","import { DataService } from './data.service';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private authService:DataService){\n\n  }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return this.authService.Authorized();\n  }\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport {FormGroup, FormControl} from '@angular/forms';\nimport { GroupDataService } from '../shared/group.data.service';\n@Component({\n  selector: 'group-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  public type:string;\n  public groupid:number;\n  public createGroupForm:FormGroup;\n  public displaySuccessMessage:boolean = false;\n\n  constructor(\n    private groupService:GroupDataService, \n    private route:ActivatedRoute,\n    private router:Router\n    ) {\n    this.route.params.subscribe((data)=>{\n      this.type = data.type ? data.type.toLowerCase() : 'create';\n      if(this.type=='update'){\n        this.groupid = data['id'];\n      }\n    });\n   }\n\n  ngOnInit() {\n    \n    this.createGroupForm = new FormGroup({\n      name : new FormControl(),\n      description : new FormControl()\n    })\n  }\n\n  onCreate(form:FormGroup){\n    if(this.type==\"create\"){\n        this.groupService.createGroup(form.value.name, form.value.description).subscribe(()=>{\n          this.displaySuccessMessage = true;\n          setTimeout(()=>{\n            this.displaySuccessMessage = false;\n            this.router.navigate(['group']);\n          },5000)\n        },\n        (error)=>{\n          alert(error.error);\n        });\n    }else if (this.type == \"update\"){\n      this.groupService.updateGroup(this.groupid,form.value.name, form.value.description).subscribe(()=>{\n        this.displaySuccessMessage = true;\n        setTimeout(()=>{\n          this.displaySuccessMessage = false;\n          this.router.navigate(['group']);\n        },5000)\n      },\n      (error)=>{\n        if(error.error.name){\n          alert(error.error.name[0]);\n        }else if(error.error.description){\n          alert(error.error.description[0]);\n        }else{\n          alert(\"some error has come check with admin\");\n        }\n      });\n    }\n\n  }\n}\n","import { GroupDataService } from './../shared/group.data.service';\nimport { DataService } from './../../app/shared/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Group } from '../shared/group.interface';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'group-detail',\n  templateUrl: './detail.component.html',\n  styleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\n\n  public userInCurrentGroup:boolean = false;\n  public posts:any = [];\n  public group:Group;\n  public loggedInUserName:String;\n\n  constructor(private service:DataService,\n    private groupService:GroupDataService,\n    private route:ActivatedRoute,\n    private router:Router) { \n    this.route.params.subscribe(groupId => {\n      this.groupService.getGroup(groupId.id).subscribe((detail:Group) => {\n        this.group = detail;\n        this.loggedInUserName = this.service.getUserName(); \n        this.userInCurrentGroup = this.group.members.findIndex((element) => {return element.email==this.loggedInUserName;}) > -1;\n      });\n    })\n  }\n  \n  public isLoggedInUserAdmin():boolean{\n    if(this.group && this.group.adminUser){\n    return this.group.adminUser.email == this.loggedInUserName;\n    }else{\n      return false;\n    }\n  }\n  ngOnInit() {\n  }\n\n  isUserAuthenticated():boolean{\n    return this.service.Authorized();\n  }\n\n  leaveGroup(groupId:number,event:any){\n    event.preventDefault();\n    this.groupService.leaveGroup(groupId).subscribe(success=>{},error =>{\n      alert(error.error);\n    })\n  }\n\n  joinGroup(groupId:number){\n    this.groupService.addMember(groupId).subscribe(success=>{},\n      error => {\n        console.log(error);\n      })\n  }\n\n  deleteGroup(groupId:number){\n    if(confirm(\"are you sure want to delete\")){\n      this.groupService.deleteGroup(groupId).subscribe(()=>{\n        this.router.navigate(['../../../','group']);\n      },(error)=>{\n        alert(error.error);\n      });\n    }\n  }\n}\n","import { GroupDataService } from './../shared/group.data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Group } from '../shared/group.interface';\nimport { DataService } from 'src/app/shared/data.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'group-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  public userIsAuthenticated:boolean = false;\n  public groups:Group[]=[];\n  public username:string=''\n  \n  constructor(\n    private groupService:GroupDataService,\n    private service:DataService,\n    private router:Router\n    ) { \n    this.userIsAuthenticated = this.service.Authorized();\n    if(this.userIsAuthenticated){\n      this.username = this.service.getUserName();\n    }\n    this.groupService.getGroups().subscribe((data:Group[])=>{\n      this.groups = data;\n    });\n  }\n\n  ngOnInit() {\n   \n  }\n\n  public loadTheGroup(id:number){\n    this.router.navigate(['group',id,'detail']);\n  }\n}\n","import { AuthenticationGuard } from './../app/shared/authentication.guard';\r\nimport { FormComponent } from './form/form.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { RouterModule, Routes} from '@angular/router';\r\nimport { NgModule } from \"@angular/core\";\r\n\r\nconst routes:Routes = [\r\n    {path:'group',component:ListComponent},\r\n    {path:'group/:id/detail',component:DetailComponent, canActivate:[AuthenticationGuard]},\r\n    {path:'group/:type',component:FormComponent, canActivate:[AuthenticationGuard]},\r\n]\r\n\r\n\r\n@NgModule({\r\n    imports:[\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports:[RouterModule]\r\n})\r\n\r\nexport class GroupRoutingModule{}","import { HttpClientModule } from '@angular/common/http';\nimport { PostModule } from './../post/post.module';\nimport { GroupRoutingModule } from './group-routing.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DetailComponent } from './detail/detail.component';\nimport { FormComponent } from './form/form.component';\nimport { ListComponent } from './list/list.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { GroupDataService } from './shared/group.data.service';\n\n@NgModule({\n  declarations: [DetailComponent, FormComponent, ListComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    GroupRoutingModule,\n    PostModule,\n    HttpClientModule\n  ],\n  providers:[\n    GroupDataService\n  ]\n})\nexport class GroupsModule { }\n","import { DataService } from './../shared/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl} from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  registerForm:FormGroup;\n  loginForm:FormGroup;\n  registerView:boolean = false;\n  constructor(private service:DataService,private route:ActivatedRoute) {\n    this.route.params.subscribe(param => {\n      if(param['type'] == 'signup'){\n        this.registerView = true;\n      }else{\n        this.registerView = false;\n      }\n    });\n   }\n\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      username: new FormControl(),\n      email: new FormControl(),\n      password: new FormControl(),\n      password1: new FormControl()\n    });\n    \n    this.loginForm = new FormGroup({\n      username: new FormControl(),\n      password: new FormControl()\n    });\n  }\n\n  onRegister(form: FormGroup){\n    this.service.register(form.value.email, form.value.username, form.value.password, form.value.password1);\n  }\n\n  onLogin(form:FormGroup){\n    this.service.login(form.value.username,form.value.password);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.css']\n})\nexport class HomepageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { DataService } from './../shared/data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(private service: DataService) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { LoginComponent } from './login/login.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LogoutComponent } from './logout/logout.component';\n\nconst routes: Routes = [\n  {path: 'home', component: HomepageComponent},\n  {path:'logout', component: LogoutComponent},\n  {path: 'login',component: LoginComponent},\n  {path: '*', redirectTo: \"['/login',{'type':'login'}]\",pathMatch: 'full'},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{ useHash: true })],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n","import { DataService } from './shared/data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'simplesocial';\n  isAuthenticated:boolean = false;\n  constructor(private service:DataService){\n    this.isAuthenticated = service.Authorized();\n    \n  }\n  \n  ngOnInit(): void {\n    this.service.isUserLoggedIn.subscribe((data:boolean) => {\n      this.isAuthenticated = data;\n    })\n  }\n\n  \n  public logout(){\n    this.service.logout();\n  }\n}\n","import { PostModule } from '../post/post.module';\nimport { GroupsModule } from '../groups/groups.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { LoginComponent } from './login/login.component';\nimport { LogoutComponent } from './logout/logout.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomepageComponent,\n    LoginComponent,\n    LogoutComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    GroupsModule,\n    PostModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}