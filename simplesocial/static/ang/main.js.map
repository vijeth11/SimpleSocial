{"version":3,"sources":["webpack:///./src/app/login/login.component.html","webpack:///./src/groups/list/list.component.css","webpack:///./src/app/app.component.css","webpack:///./src/post/user-list/user-list.component.html","webpack:///./src/groups/form/form.component.html","webpack:///./src/groups/detail/detail.component.html","webpack:///./src/post/detail/detail.component.css","webpack:///./src/post/list/list.component.css","webpack:///./src/groups/list/list.component.html","webpack:///./src/groups/form/form.component.css","webpack:///./src/app/homepage/homepage.component.css","webpack:///./src/post/form/form.component.html","webpack:///./src/app/homepage/homepage.component.html","webpack:///./src/post/post/post.component.css","webpack:///./src/app/logout/logout.component.html","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/groups/detail/detail.component.css","webpack:///./src/post/list/list.component.html","webpack:///./src/post/user-list/user-list.component.css","webpack:///./src/app/login/login.component.css","webpack:///./src/app/app.component.html","webpack:///./src/post/post/post.component.html","webpack:///./src/app/logout/logout.component.css","webpack:///./src/post/detail/detail.component.html","webpack:///./src/post/form/form.component.css","webpack:///./src/post/post/post.component.ts","webpack:///./src/app/shared/data.service.ts","webpack:///./src/groups/shared/group.data.service.ts","webpack:///./src/post/shared/postdata.service.ts","webpack:///./src/post/user-list/user-list.component.ts","webpack:///./src/post/list/list.component.ts","webpack:///./src/post/form/form.component.ts","webpack:///./src/post/shared/PostDataResolver.ts","webpack:///./src/post/post-routing.modules.ts","webpack:///./src/post/detail/detail.component.ts","webpack:///./src/post/post.module.ts","webpack:///./src/app/shared/authentication.guard.ts","webpack:///./src/groups/form/form.component.ts","webpack:///./src/groups/detail/detail.component.ts","webpack:///./src/groups/list/list.component.ts","webpack:///./src/groups/shared/GroupDataResolver.ts","webpack:///./src/groups/group-routing.module.ts","webpack:///./src/groups/groups.module.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/homepage/homepage.component.ts","webpack:///./src/app/logout/logout.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["module","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","post_component_PostComponent","PostComponent","prototype","ngOnInit","__decorate","Object","core","selector","data_service_DataService","DataService","http","router","this","loggedinUserToken","userName","userId","isUserLoggedIn","Subject","next","getUserName","getUserId","Authorized","getLoggedInUserToken","length","localStorage","getItem","Number","setLoginTokenAndUsernameAndUserId","username","token","userid","setItem","toString","getCSRFToken","document","cookie","split","forEach","ele","data","trim","toLowerCase","login","email","password","_this","get","subscribe","user_id","navigate","error","post","headers","X-CSRFToken","non_field_errors","alert","logout","Authorization","removeItem","register","password1","password2","type","data_service_decorate","providedIn","fesm5_http","fesm5_router","group_data_service_GroupDataService","GroupDataService","authentication","getGroups","getGroup","createGroup","name","description","updateGroup","groupid","put","leaveGroup","delete","deleteGroup","groupId","addMember","group","user","group_data_service_decorate","postdata_service_PostdataService","PostdataService","groupDataService","getPostList","pipe","map","grouplist","adminUser","index","members","findIndex","ele1","push","createPost","message","updatePost","postId","deletePost","postdata_service_decorate","user_list_component_UserListComponent","UserListComponent","route","postService","posts","snapshot","params","filter","user_list_component_decorate","list_component_ListComponent","ListComponent","postDataService","usergroups","inGroupPage","displayOnlyList","othergroups","isUserAuthenticated","list_component_decorate","form_component_FormComponent","FormComponent","groupsList","displaySuccessMessage","selectedGroupId","postForm","fesm5_forms","Message","Group","setValue","displayError","displaySuccess","setTimeout","value","form_component_decorate","PostDataResolver_PostDataResolver","PostDataResolver","service","state","PostDataResolver_decorate","routes","path","component","post_routing_modules_PostRoutingModule","PostRoutingModule","post_routing_modules_decorate","imports","forChild","detail_component_DetailComponent","DetailComponent","loggedInUserEmail","window","location","reload","detail_component_decorate","post_module_PostModule","PostModule","post_module_decorate","declarations","common","authentication_guard_AuthenticationGuard","AuthenticationGuard","authService","canActivate","queryParams","authentication_guard_decorate","form_form_component_FormComponent","groupService","createGroupForm","onCreate","form","form_form_component_decorate","detail_detail_component_DetailComponent","userInCurrentGroup","detail","loggedInUserName","element","isLoggedInUserAdmin","event","preventDefault","success","joinGroup","console","log","confirm","detail_detail_component_decorate","list_list_component_ListComponent","userIsAuthenticated","groups$","loadTheGroup","getPostsCount","list_list_component_decorate","GroupDataResolver_GroupDataResolver","GroupDataResolver","GroupDataResolver_decorate","group_routing_module_routes","group_routing_module_GroupRoutingModule","GroupRoutingModule","group_routing_module_decorate","groups_module_GroupsModule","GroupsModule","groups_module_decorate","providers","login_component_LoginComponent","LoginComponent","registerView","param","registerForm","loginForm","onRegister","onLogin","login_component_decorate","homepage_component_HomepageComponent","HomepageComponent","homepage_component_decorate","logout_component_LogoutComponent","LogoutComponent","logout_component_decorate","app_routing_module_routes","redirectTo","pathMatch","app_routing_module_AppRoutingModule","AppRoutingModule","app_routing_module_decorate","forRoot","useHash","app_component_AppComponent","AppComponent","title","isAuthenticated","app_component_decorate","app_module_AppModule","AppModule","app_module_decorate","platform_browser","bootstrap","platform_browser_dynamic","bootstrapModule","catch","err"],"mappings":"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","file":"main.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\">\\n <div *ngIf=\\\"registerView\\\" class=\\\"justify-content-center\\\">\\n    <h1>Sign Up</h1>\\n    <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegister(registerForm)\\\">\\n      <label>Username:\\n        <input type=\\\"text\\\" formControlName=\\\"username\\\"/>\\n      </label>\\n      <label>Email\\n        <input type=\\\"email\\\" formControlName=\\\"email\\\"/>\\n      </label>\\n      <label> Password \\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" >\\n      </label>\\n      <label> confirm Password\\n        <input type=\\\"password\\\" formControlName=\\\"password1\\\">\\n      </label>\\n      <button type=\\\"submit\\\" [disabled]=\\\"!registerForm?.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"!registerView\\\" class=\\\"justify-content-center\\\">\\n    <h1>Login</h1>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onLogin(loginForm)\\\">\\n      <label> Username or Email\\n        <input type=\\\"text\\\" formControlName=\\\"username\\\">\\n      </label>\\n      <label> Password\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\"/>\\n      </label>\\n      <button type=\\\"submit\\\" [disabled]=\\\"!loginForm?.valid\\\">Login</button>\\n      <button type=\\\"button\\\" (onclick)=\\\"registerView=true\\\">Register</button>\\n    </form>\\n    \\n  </div>\\n</div>\\n\"","module.exports = \".list-group-item{\\r\\n    text-decoration: none;\\r\\n    color:black;\\r\\n}\\r\\n\\r\\n.list-group-item:hover{\\r\\n    cursor: default;\\r\\n}\\r\\n\\r\\n.title{\\r\\n    color:blue;\\r\\n    text-decoration: underline;\\r\\n}\\r\\n\\r\\n.title:hover{\\r\\n    cursor:pointer;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ncm91cHMvbGlzdC9saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxzQkFBc0I7SUFDdEIsWUFBWTtDQUNmOztBQUVEO0lBQ0ksZ0JBQWdCO0NBQ25COztBQUVEO0lBQ0ksV0FBVztJQUNYLDJCQUEyQjtDQUM5Qjs7QUFFRDtJQUNJLGVBQWU7Q0FDbEIiLCJmaWxlIjoic3JjL2dyb3Vwcy9saXN0L2xpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5saXN0LWdyb3VwLWl0ZW17XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuLmxpc3QtZ3JvdXAtaXRlbTpob3ZlcntcclxuICAgIGN1cnNvcjogZGVmYXVsdDtcclxufVxyXG5cclxuLnRpdGxle1xyXG4gICAgY29sb3I6Ymx1ZTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG59XHJcblxyXG4udGl0bGU6aG92ZXJ7XHJcbiAgICBjdXJzb3I6cG9pbnRlcjtcclxufSJdfQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"post=-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <h1>{{username}}</h1>\\n      </div>\\n      <div class=\\\"col-md-8\\\">\\n        <post-detail *ngFor=\\\"let post of posts\\\" [post]=\\\"post\\\" [inGroupPage]=\\\"false\\\"></post-detail>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h4 *ngIf = \\\"type=='create'\\\">Create New Group</h4>\\n        <h4 *ngIf = \\\"type=='update'\\\">Update Group</h4>\\n        <form  [formGroup]=\\\"createGroupForm\\\" (ngSubmit)=\\\"onCreate(createGroupForm)\\\">\\n            <label>Name:\\n              <input type=\\\"text\\\" formControlName=\\\"name\\\"/>\\n            </label>\\n            <label>Description\\n              <input type=\\\"text\\\" formControlName=\\\"description\\\"/>\\n            </label>\\n            <!--Create a drop down for selecting members-->\\n            <input type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Submit\\\">\\n        </form>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"displaySuccessMessage\\\">\\n      <div class=\\\"col-md-12 success\\\">\\n        <h1>Success fully {{type}}ed</h1>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <!--Group Name from backend-->\\n        <div class=\\\"col-md-8\\\">\\n          <h1> {{group?.name}} </h1>\\n          <br>\\n          <h2>Member Count : {{group?.members?.length}}</h2>\\n          <br>\\n          <div class=\\\"content\\\">\\n            <ng-template [ngIf]=\\\"userInCurrentGroup\\\">\\n              <!-- pass group slug to leave url-->\\n              <button (click)=\\\"leaveGroup(group.id,$event)\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Group Leave <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </button>\\n              <a *ngIf=\\\"isLoggedInUserAdmin()\\\" [routerLink]=\\\"['../../../','group','update',{'id':group.id}]\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Group Update <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </a>\\n              <a *ngIf=\\\"userInCurrentGroup\\\" [routerLink]=\\\"['../../../','post','create',{'groupId':group.id,'type':'create'}]\\\" class = \\\"btn btn-lg btn-fill btn-warning\\\"> \\n                Post In Group <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </a>\\n              <button *ngIf=\\\"isLoggedInUserAdmin()\\\" (click)=\\\"deleteGroup(group.id)\\\" class = \\\"btn btn-lg btn-fill btn-danger\\\"> \\n                Group Delete <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n              </button>\\n            </ng-template>\\n            <ng-template [ngIf]=\\\"!userInCurrentGroup\\\">\\n              <!-- pass group slug to join url-->\\n              <button  class = \\\"btn btn-lg btn-fill btn-warning\\\" (click)=\\\"joinGroup(group.id)\\\"> \\n                  Group Join <span class=\\\"glyphicon glyphicon-ok-circle\\\"></span>\\n              </button>\\n            </ng-template>\\n          </div>\\n        </div>      \\n    </div>\\n    <div class=\\\"row\\\">\\n      <h4 class=\\\"col-md-8\\\" style=\\\"margin-top:3vh\\\">Group Posts</h4>    \\n      <div class = \\\"col-md-8 posts-list\\\">\\n        <ul *ngIf=\\\"posts?.length > 0;else noPostMessage\\\">\\n            <post-list [posts]=\\\"posts\\\" [displayOnlyList]=\\\"true\\\" [inGroupPage]=\\\"true\\\"></post-list>\\n        </ul>\\n        <ng-template #noPostMessage>\\n          <h2>No posts in this group yet!</h2>\\n        </ng-template>          \\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".post{\\r\\n    border: 2px solid black;\\r\\n    display: block;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wb3N0L2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHdCQUF3QjtJQUN4QixlQUFlO0NBQ2xCIiwiZmlsZSI6InNyYy9wb3N0L2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3N0e1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufSJdfQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC9saXN0L2xpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"group-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <div class=\\\"content\\\">\\n            <ng-template [ngIf]=\\\"userIsAuthenticated\\\">\\n              <h2>Welcome Back!</h2>\\n              <!-- take to posts of the user on click-->\\n              <a href=\\\"\\\">\\n                @{{username}}\\n              </a>\\n            </ng-template>\\n            <h2>Groups</h2>\\n            <p>Welcome to the groups page!</p>\\n            <ng-template [ngIf]=\\\"userIsAuthenticated\\\">\\n              <!--Take user to create Group form-->\\n                <a [routerLink]=\\\"['create']\\\" routerLinkActive=\\\"router-link-active\\\"  class=\\\"btn btn-md btn-fill btn-warning\\\">\\n                  <span class=\\\"glyphicon glyphicon-plus-sign\\\">Create New Group!</span>\\n                </a>\\n            </ng-template>\\n        </div>\\n      </div>\\n      <div class = col-md-8>\\n        <div class=\\\"list-group\\\">\\n            <!--Link to that group detail page-->\\n            <a *ngFor=\\\"let group of groups$ | async\\\" class=\\\"list-group-item\\\">\\n              <h3 (click) = \\\"loadTheGroup(group.id)\\\"class=\\\"title list-group-item-heading\\\">{{group.name}}</h3>\\n              <div class=\\\"list-group-item-text container-fluid\\\">\\n                <h5>Description:</h5>\\n                {{group.description}}\\n              </div>\\n              <br>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-4\\\">\\n                  Total Members : <span class=\\\"badge\\\">{{group.members?.length}}</span>                  \\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                  Total Posts : <span class='badge'>{{getPostsCount(group.id)}}</span>                  \\n                </div>\\n              </div>\\n            </a>      \\n        </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".success{\\r\\n    color:green;\\r\\n    background-color:lightgreen;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ncm91cHMvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osNEJBQTRCO0NBQy9CIiwiZmlsZSI6InNyYy9ncm91cHMvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VjY2Vzc3tcclxuICAgIGNvbG9yOmdyZWVuO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjpsaWdodGdyZWVuO1xyXG59Il19 */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWVwYWdlL2hvbWVwYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"post-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h4 *ngIf=\\\"type=='create'\\\"> Create a new post</h4>\\n        <h4 *ngIf=\\\"type=='update'\\\"> Update post </h4>\\n        <form [formGroup]='postForm' (submit)=\\\"createPost(postForm)\\\">\\n          <label>Message</label>\\n          <br>\\n          <input type=\\\"text\\\" formControlName=\\\"Message\\\">\\n          <br>\\n          <label *ngIf=\\\"type=='create'\\\"> Select the Group</label>\\n          <select *ngIf=\\\"type=='create'\\\" class=\\\"custom-select\\\" formControlName=\\\"Group\\\">\\n            <option selected value=\\\"0\\\">Choose Group</option>\\n            <option *ngFor=\\\"let group of groupsList\\\" value=\\\"{{group.id}}\\\">{{group.name}}</option>\\n          </select>\\n          <br>\\n          <input type=\\\"submit\\\" value=\\\"Post\\\" class=\\\"btn btn-primary btn-large\\\">\\n        </form>\\n      </div>      \\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"displaySuccessMessage\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <h1>Success fully created</h1>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"<h1> Welcome to Star Social!</h1>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC9wb3N0L3Bvc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"\\n<h1> Thanks for visiting, come back soon! </h1>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","module.exports = \".posts-list{\\r\\n    margin-left: -3vw;\\r\\n    margin-top: 2vh;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ncm91cHMvZGV0YWlsL2RldGFpbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGdCQUFnQjtDQUNuQiIsImZpbGUiOiJzcmMvZ3JvdXBzL2RldGFpbC9kZXRhaWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3N0cy1saXN0e1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0zdnc7XHJcbiAgICBtYXJnaW4tdG9wOiAydmg7XHJcbn0iXX0= */\"","module.exports = \"<div class=\\\"post=-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\" *ngIf=\\\"!displayOnlyList\\\">\\n        <div class=\\\"card card-with-shaddow\\\">\\n          <div class=\\\"content\\\">\\n            <h5 class=\\\"title\\\">Your Groups</h5>\\n            <ul class=\\\"list-unstyled\\\">\\n              <li *ngFor=\\\"let group of usergroups\\\" class='group li-with-bullet'> \\n                <a [routerLink]=\\\"['../','group',group.id,'detail']\\\">{{ group.name }}</a>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n        <div class=\\\"card ard-with-shadow\\\">\\n          <div class=\\\"content\\\">\\n            <h5 class='title'>All Groups</h5>\\n            <ul class='list-unstyled'>\\n              <li *ngFor=\\\"let group of othergroups\\\" class='group li-with-bullet'>\\n                <a [routerLink]=\\\"['../','group',group.id,'detail']\\\">{{ group.name }}</a>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n      </div>\\n      <div [ngClass]=\\\"{'col-md-12':displayOnlyList,'col-md-8':!displayOnlyList}\\\">\\n        <post-detail *ngFor=\\\"let post of posts\\\" [post]=\\\"post\\\" [inGroupPage]=\\\"inGroupPage\\\"></post-detail>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Add A model to display confirm delete -->\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcG9zdC91c2VyLWxpc3QvdXNlci1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<nav class='navbar navbar-expand-lg  navbar-light bg-light mynav' role='navigation' id='navbar'>\\n    <div class=\\\"container\\\">\\n        <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/home']\\\"> Star  Social </a> \\n        <ul class=\\\"nav navbar-nav navbar-right\\\">\\n            <ng-template [ngIf]=\\\"isAuthenticated\\\">\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['post']\\\">Post</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" [routerLink]=\\\"['group']\\\">Groups</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" [routerLink]=\\\"['group','create']\\\">Create Group</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" (click)=\\\"logout()\\\">Logout</a></li>\\n            </ng-template>\\n            <ng-template [ngIf]=\\\"!isAuthenticated\\\">\\n                <li class=\\\"nav-item\\\"><a  class=\\\"nav-link\\\" [routerLink]=\\\"['group']\\\">Groups</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['login',{'type':'login'}]\\\">Log In</a></li>\\n                <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"[routerLink]=\\\"['login',{'type':'signup'}]\\\">Sign Up</a></li>\\n            </ng-template>\\n        </ul>\\n    </div>\\n</nav>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"<div class=\\\"post-page\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <post-detail></post-detail>\\n      </div>\\n    </div>\\n  </div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ291dC9sb2dvdXQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"post media\\\">\\n          <h3>{{ post.message }}</h3>\\n          <div class=\\\"media-body\\\">            \\n            <h5 class=\\\"media-heading\\\">\\n              <span class=\\\"username\\\">\\n                <a [routerLink]=\\\"['/post',post.user.username,'userlist']\\\"><strong> {{ post.user.username }}</strong></a>\\n              </span>\\n              <time class=\\\"time\\\">\\n                {{ post.created_at }}\\n              </time>\\n            </h5>\\n            <h4 *ngIf = \\\"!inGroupPage\\\">\\n              Group : <a [routerLink]=\\\"['/group',post.group.id,'detail']\\\">{{post.group.name}}</a>\\n            </h4>\\n            <div class=\\\"media-footer\\\">\\n                <a *ngIf=\\\"isUserAuthenticated && post.user.email == loggedInUserEmail\\\" (click)=\\\"deletePost(post.id)\\\" class=\\\"btn btn-large btn-simple\\\">\\n                  <span class=\\\"text-danger icon-label\\\">Delete</span>\\n                </a>\\n                <a *ngIf=\\\"isUserAuthenticated && post.user.email == loggedInUserEmail\\\"  [routerLink]=\\\"['../','post','create',{'id':post.id,'groupId':post.group.id,'type':'update'}]\\\"  class=\\\"btn btn-large btn-simple\\\">\\n                  <span class=\\\"text-warning icon-label\\\">Update</span>\\n                </a>\\n            </div>\\n          </div>\\n</div>\\n    \"","module.exports = \".btn {\\r\\n    margin-top:15px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wb3N0L2Zvcm0vZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0NBQ25CIiwiZmlsZSI6InNyYy9wb3N0L2Zvcm0vZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ0biB7XHJcbiAgICBtYXJnaW4tdG9wOjE1cHg7XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})\nexport class PostComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private loggedinUserToken:string = '';\n  private userName:string ='';\n  private userId:number = 0;\n  public isUserLoggedIn:Subject<boolean> = new Subject<boolean>();\n  constructor(private http:HttpClient,private router:Router) { \n    this.isUserLoggedIn.next(false);\n  }\n\n  public getUserName():string{\n    return this.userName;\n  }\n\n  public getUserId():number{\n    return this.userId;\n  }\n\n  public Authorized():boolean{\n    this.getLoggedInUserToken();\n    this.isUserLoggedIn.next(this.loggedinUserToken.length > 0);\n    return this.loggedinUserToken.length > 0 ?  true: false;\n  }\n\n  public getLoggedInUserToken():string{\n    this.loggedinUserToken = localStorage.getItem('userToken') ? localStorage.getItem('userToken') : this.loggedinUserToken;\n    this.userName = localStorage.getItem('username') ? localStorage.getItem('username') : this.userName;\n    this.userId = localStorage.getItem('userid') && Number(localStorage.getItem('userid')) > 0? Number(localStorage.getItem('userid')) : this.userId;\n    return this.loggedinUserToken;\n  }\n  \n  private setLoginTokenAndUsernameAndUserId(username:string,token:string, userid:number){\n      this.loggedinUserToken='Token '+token;\n      localStorage.setItem('userToken',this.loggedinUserToken);\n      this.userName = username;\n      localStorage.setItem('username',username);\n      this.userId = userid;\n      localStorage.setItem('userid', userid.toString());\n  }\n\n  public getCSRFToken():string{\n    document.cookie.split(';').forEach( ele => {\n      let data = ele.split(\"=\");\n      if(data[0].trim().toLowerCase()=='csrftoken'){\n       return data[1];\n      }\n   });\n   return \"\";\n  }\n\n  public login(email:string,password:string){\n    let cookie = this.getCSRFToken();   \n    this.http.get('api/get-token?username='+email).subscribe((data:any) => {\n      this.isUserLoggedIn.next(true);\n      this.setLoginTokenAndUsernameAndUserId(email,data.token,data.user_id);\n      this.router.navigate(['home']);\n    },\n    (error) => {\n      this.http.post('api/login/',{\n        'email':email,\n        'password':password\n      },{\n        headers:{\n          'X-CSRFToken': cookie\n        }\n      }).subscribe((data:any) => {\n        this.isUserLoggedIn.next(true);\n        this.setLoginTokenAndUsernameAndUserId(email,data.token,data.user_id);\n        this.router.navigate(['home']);\n      },(error)=>{\n        if(error.error.non_field_errors && error.error.non_field_errors.length > 0){\n          alert(error.error.non_field_errors[0]);\n        }\n        else if(error.error.email && error.error.email.length > 0){\n          alert(error.error.email[0]);\n        }\n        else if(error.error.password && error.error.password.length > 0){\n          alert(error.error.password[0])\n        }\n      });\n    });    \n  }\n\n  public logout(){\n    this.http.get('/api/user/logout/',{\n      headers:{\n        'Authorization':this.loggedinUserToken\n      }\n    }).subscribe(() => {\n      this.loggedinUserToken = '';\n      localStorage.removeItem('userToken');\n      this.isUserLoggedIn.next(false);\n      this.router.navigate(['logout']);\n    });\n  }\n\n  public register(email,username,password1,password2){\n    let cookie = this.getCSRFToken();\n    this.http.post('api/user/',\n    {\n      \"username\":username,\n      \"email\":email,\n      \"password\":password1,\n      \"password2\":password2\n    },\n    {\n      headers:\n      {\n        'X-CSRFToken': cookie\n      }\n    }).subscribe(()=>{\n      this.router.navigate(['login',{'type':'login'}]);\n    },\n    (error)=>{\n      alert(error);\n    });\n  }\n}\n","import { PostdataService } from './../../post/shared/postdata.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Group } from './group.interface';\r\nimport { DataService } from 'src/app/shared/data.service';\r\n@Injectable()\r\nexport class GroupDataService {\r\n  loggedinUserToken:string = '';\r\n  constructor(private http:HttpClient,private authentication:DataService){}\r\n\r\n  public getGroups():Observable<Group[]>{\r\n    return this.http.get<Group[]>(\"api/group-list/\");\r\n  }\r\n\r\n  public getGroup(id:number):Observable<Group>{\r\n      return this.http.get<Group>('api/group/'+id.toString()+'/',{headers:{'Authorization':this.authentication.getLoggedInUserToken()}});\r\n  }\r\n\r\n  public createGroup(name:string, description:string):Observable<any>{\r\n     return this.http.post<any>('api/group/',\r\n     {\r\n         'name':name,\r\n         'description':description\r\n     },\r\n     {\r\n         headers:{\r\n             'Authorization':this.authentication.getLoggedInUserToken()\r\n            }\r\n    });\r\n  }\r\n\r\n  public updateGroup(groupid:number, name:string=\"\", description:string=\"\"):Observable<any>{\r\n    return this.http.put<any>('api/group/'+groupid+\"/\",\r\n    {\r\n        'name':name,\r\n        'description':description\r\n    },\r\n    {\r\n        headers:{\r\n            'Authorization':this.authentication.getLoggedInUserToken()\r\n           }\r\n   });\r\n }\r\n  public leaveGroup(groupid:number):Observable<any>{    \r\n    return this.http.delete<any>('api/group/'+groupid.toString()+'/deletemember/1/',\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n\r\n  public deleteGroup(groupId:number):Observable<any>{\r\n    return this.http.delete<any>('api/group/'+groupId.toString()+'/',\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n  \r\n  public addMember(groupid:number):Observable<any>{\r\n    return this.http.post<any>('api/add-member/',{\r\n      'group':groupid,\r\n      'user':this.authentication.getUserId()\r\n    },\r\n    {\r\n      headers:{\r\n        'Authorization':this.authentication.getLoggedInUserToken()\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { GroupDataService } from './../../groups/shared/group.data.service';\nimport { Post } from './post.interface';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DataService } from 'src/app/shared/data.service';\nimport { map } from 'rxjs/operators';\nimport { Group } from 'src/groups/shared/group.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostdataService {\n\n  constructor(\n    private http:HttpClient,\n    private authentication:DataService,\n    private groupDataService:GroupDataService) { }\n\n  public getPostList():Observable<Post[]>{\n    return this.http.get<Post[]>(\"api/post/\",{\n      headers: {\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n\n  public getGroups(){    \n    return this.groupDataService.getGroups().pipe(map((data:Group[])=>{\n      let grouplist = []\n      data.forEach(ele=>{\n        let user= null;\n        if (ele.adminUser.email == this.authentication.getUserName()){\n          user= ele.adminUser;\n        }else {\n          let index = ele.members.findIndex((ele1)=>{return ele1.email == this.authentication.getUserName();});\n          if(index > -1){\n              user = ele.members[index];\n          }\n        }\n        grouplist.push({\"id\":ele.id,\"name\":ele.name,\"user\":user});\n      });\n      return grouplist;\n    }));\n  }\n\n\n  public createPost(groupId:number, message:string){\n    return this.http.post<any>('api/post-create/',{\n      \"group\":groupId,\n      \"message\":message\n    },\n    {\n      headers:{\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n\n  public updatePost(groupId:number, message:string, postId:number){\n    return this.http.put<any>('api/post-update/'+postId+'/',{\n      \"group\":groupId,\n      \"message\":message\n    },\n    {\n      headers:{\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n\n  public deletePost(postId:number){\n    return this.http.delete<any>('api/post-update/'+postId+'/',\n    {\n      headers:{\n        \"Authorization\":this.authentication.getLoggedInUserToken()\n      }\n    });\n  }\n}\n","import { PostdataService } from './../shared/postdata.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'post-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css']\n})\nexport class UserListComponent implements OnInit {\n\n  public posts:any = []\n  public username=\"\";\n  \n  constructor(private route:ActivatedRoute,private postService:PostdataService) { \n    this.posts = this.route.snapshot.data.post;\n    this.route.params.subscribe(data=>{\n      this.username = data['name'];\n      if(this.username){\n        this.posts = this.route.snapshot.data.post.filter(ele => ele.user.username == this.username);\n      }\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { PostdataService } from '../shared/postdata.service';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Post } from '../shared/post.interface';\n\n@Component({\n  selector: 'post-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  public usergroups:any = [];\n  @Input() inGroupPage:boolean = false;\n  @Input() posts:Post[] = [];\n  @Input() displayOnlyList:boolean = false;\n  public othergroups:any = [];\n  isUserAuthenticated:boolean = true;\n\n  constructor(private postDataService:PostdataService, private route:ActivatedRoute) { \n    this.posts = this.route.snapshot.data.post;\n  }\n\n  ngOnInit() {\n    this.postDataService.getGroups().subscribe((data)=>{\n        data.forEach((ele)=>{\n          if(ele.user != null){\n          this.usergroups.push(ele);\n          }else{\n            this.othergroups.push(ele);\n          }\n        })\n    });\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Group } from './../../groups/shared/group.interface';\nimport { PostdataService } from './../shared/postdata.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Form,FormGroup,FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'post-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  postForm:FormGroup;\n  groupsList:any = [];\n  selectedGroupId:number;\n  type:string;  \n  postId:number=0;\n  public displaySuccessMessage:boolean = false;\n\n  constructor(\n    private postDataService:PostdataService,\n    private route:ActivatedRoute,\n    private router:Router\n    ) {\n    this.route.params.subscribe(data => { \n      this.selectedGroupId = data['groupId'];\n      if(data['type']){\n        this.type = data['type'];\n      }\n      if(data['id']){\n        this.postId = data['id'];\n      }\n    });\n   }\n\n  ngOnInit() {\n    this.postDataService.getGroups().subscribe(data => {\n      data.forEach((ele)=>{\n        if(ele.user != null){\n          this.groupsList.push(ele);\n        }\n      })\n    });\n\n    this.postForm = new FormGroup({\n      Message: new FormControl(),\n      Group:new FormControl()\n    })\n\n    this.postForm.get('Group').setValue(this.selectedGroupId ? this.selectedGroupId : 0);\n  }\n\n  private displayError(error:any){\n    if(error.error['group']){\n      alert(error.error['group']);\n    }else if(error.error['message']){\n      alert(error.error['message']);\n    }else{\n      alert(error.error);\n    }\n  }\n\n  private displaySuccess(){\n    this.displaySuccessMessage = true;\n        setTimeout(()=>{\n          this.displaySuccessMessage = false;\n          this.router.navigate(['post']);\n        },5000);\n  }\n\n  public createPost(post:FormGroup){\n    if(this.type=='update'){\n      this.updatePost(post);\n    }else{\n      this.postDataService.createPost(post.value.Group, post.value.Message).subscribe(()=>{\n        this.displaySuccess();\n      },\n      (error)=>{\n        this.displayError(error);\n      });\n    }\n  }\n\n  public updatePost(post:FormGroup){\n    this.postDataService.updatePost(this.selectedGroupId,post.value.Message,this.postId).subscribe(()=>{\n      this.displaySuccess();\n    },\n    (error)=>{\n      this.displayError(error);\n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Post } from './post.interface';\r\nimport { PostdataService } from './postdata.service';\r\n@Injectable({ providedIn: 'root' })\r\nexport class PostDataResolver implements Resolve<Post[]> {\r\n  constructor(private service: PostdataService) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<any>|Promise<any>|any {\r\n    return this.service.getPostList();\r\n  }\r\n}","import { PostComponent } from './post/post.component';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormComponent } from './form/form.component';\r\nimport { PostDataResolver } from './shared/PostDataResolver';\r\n\r\n// Add gaurds for authentication\r\nconst routes:Routes = [\r\n    {path:'post',component:ListComponent, resolve:{ post:PostDataResolver}},\r\n    {path:'post/:id/detail',component:PostComponent},\r\n    {path:'post/:name/userlist',component:UserListComponent,resolve:{ post:PostDataResolver}},\r\n    {path:'post/create', component:FormComponent},//add gaurd\r\n    {path:'post/:id/update', component:FormComponent}//add gaurd\r\n]\r\n\r\n@NgModule({\r\n    imports:[\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports:[RouterModule]\r\n})\r\n\r\nexport class PostRoutingModule{}","import { Router } from '@angular/router';\nimport { DataService } from 'src/app/shared/data.service';\nimport { PostdataService } from './../shared/postdata.service';\nimport { Post } from './../shared/post.interface';\nimport { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'post-detail',\n  templateUrl: './detail.component.html',\n  styleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\n\n  @Input() post:Post;\n  @Input() inGroupPage:boolean = false;\n  public isUserAuthenticated:boolean = false;\n  public loggedInUserEmail:string = \"\";\n\n  constructor(\n    private postService:PostdataService,\n    private authentication:DataService,\n    private router:Router) {\n    this.isUserAuthenticated = this.authentication.Authorized();\n    this.loggedInUserEmail = this.authentication.getUserName();\n    this.authentication.isUserLoggedIn.subscribe((data:boolean) => {\n      this.isUserAuthenticated = data;\n    });\n   }\n\n  ngOnInit() {\n  }\n\n  \n  public deletePost(postId:number){\n    this.postService.deletePost(postId).subscribe(()=>{\n      window.location.reload();\n    },\n    (error)=>{\n      alert(error.error);\n    })\n  }\n}\n","import { PostRoutingModule } from './post-routing.modules';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DetailComponent } from './detail/detail.component';\nimport { ListComponent } from './list/list.component';\nimport { FormComponent } from './form/form.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { PostComponent } from './post/post.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [DetailComponent, ListComponent, FormComponent, UserListComponent, PostComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    PostRoutingModule,\n  ],\n  exports: [\n    ListComponent\n  ]\n})\nexport class PostModule { }\n","import { DataService } from './data.service';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private authService:DataService,private router:Router){\n\n  }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if(this.authService.Authorized()){\n      return true;\n    }\n    this.router.navigate(['/login'],{\n      queryParams: {\n        type: 'login'\n      }\n    });\n    return false;\n  }\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport {FormGroup, FormControl} from '@angular/forms';\nimport { GroupDataService } from '../shared/group.data.service';\n@Component({\n  selector: 'group-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  public type:string;\n  public groupid:number;\n  public createGroupForm:FormGroup;\n  public displaySuccessMessage:boolean = false;\n\n  constructor(\n    private groupService:GroupDataService, \n    private route:ActivatedRoute,\n    private router:Router\n    ) {\n    this.route.params.subscribe((data)=>{\n      this.type = data.type ? data.type.toLowerCase() : 'create';\n      if(this.type=='update'){\n        this.groupid = data['id'];\n      }\n    });\n   }\n\n  ngOnInit() {\n    \n    this.createGroupForm = new FormGroup({\n      name : new FormControl(),\n      description : new FormControl()\n    })\n  }\n\n  onCreate(form:FormGroup){\n    if(this.type==\"create\"){\n        this.groupService.createGroup(form.value.name, form.value.description).subscribe(()=>{\n          this.displaySuccessMessage = true;\n          setTimeout(()=>{\n            this.displaySuccessMessage = false;\n            this.router.navigate(['group']);\n          },5000)\n        },\n        (error)=>{\n          alert(error.error);\n        });\n    }else if (this.type == \"update\"){\n      this.groupService.updateGroup(this.groupid,form.value.name, form.value.description).subscribe(()=>{\n        this.displaySuccessMessage = true;\n        setTimeout(()=>{\n          this.displaySuccessMessage = false;\n          this.router.navigate(['group']);\n        },5000)\n      },\n      (error)=>{\n        if(error.error.name){\n          alert(error.error.name[0]);\n        }else if(error.error.description){\n          alert(error.error.description[0]);\n        }else{\n          alert(\"some error has come check with admin\");\n        }\n      });\n    }\n\n  }\n}\n","import { PostdataService } from './../../post/shared/postdata.service';\nimport { GroupDataService } from './../shared/group.data.service';\nimport { DataService } from './../../app/shared/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Group } from '../shared/group.interface';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'group-detail',\n  templateUrl: './detail.component.html',\n  styleUrls: ['./detail.component.css']\n})\nexport class DetailComponent implements OnInit {\n\n  public userInCurrentGroup:boolean = false;\n  public posts:any;\n  public group:Group;\n  public loggedInUserName:String;\n\n  constructor(private service:DataService,\n    private groupService:GroupDataService,\n    private route:ActivatedRoute,\n    private postService:PostdataService,\n    private router:Router) { \n    this.route.params.subscribe(groupId => {\n      this.groupService.getGroup(groupId.id).subscribe((detail:Group) => {\n        this.group = detail;\n        this.loggedInUserName = this.service.getUserName(); \n        this.userInCurrentGroup = this.group.members.findIndex((element) => {return element.email==this.loggedInUserName;}) > -1;\n        this.posts = this.route.snapshot.data.posts ? this.route.snapshot.data.posts.filter((ele) => ele.group.id == groupId.id) : [];\n      });\n    })\n  }\n  \n  public isLoggedInUserAdmin():boolean{\n    if(this.group && this.group.adminUser){\n    return this.group.adminUser.email == this.loggedInUserName;\n    }else{\n      return false;\n    }\n  }\n  ngOnInit() {\n  }\n\n  isUserAuthenticated():boolean{\n    return this.service.Authorized();\n  }\n\n  leaveGroup(groupId:number,event:any){\n    event.preventDefault();\n    this.groupService.leaveGroup(groupId).subscribe(success=>{\n      window.location.reload();\n    },error =>{\n      alert(error.error);\n    })\n  }\n\n  joinGroup(groupId:number){\n    this.groupService.addMember(groupId).subscribe(success=>{\n      window.location.reload();\n    },\n      error => {\n        console.log(error);\n      })\n  }\n\n  deleteGroup(groupId:number){\n    if(confirm(\"are you sure want to delete\")){\n      this.groupService.deleteGroup(groupId).subscribe(()=>{\n        this.router.navigate(['../../../','group']);\n      },(error)=>{\n        alert(error.error);\n      });\n    }\n  }\n}\n","import { PostdataService } from './../../post/shared/postdata.service';\nimport { Observable } from 'rxjs';\nimport { GroupDataService } from './../shared/group.data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Group } from '../shared/group.interface';\nimport { DataService } from 'src/app/shared/data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'group-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  public userIsAuthenticated:boolean = false;\n  public groups$:Observable<Group[]>;\n  public username:string=''\n  public posts:any;\n\n  constructor(\n    private groupService:GroupDataService,\n    private service:DataService,\n    private route:ActivatedRoute,\n    private router:Router\n    ) { \n    this.userIsAuthenticated = this.service.Authorized();\n    if(this.userIsAuthenticated){\n      this.username = this.service.getUserName();\n    }\n    this.posts = this.route.snapshot.data.posts;\n  }\n\n  ngOnInit() {\n    this.groups$ = this.groupService.getGroups();\n  }\n\n  public loadTheGroup(id:number){\n    this.router.navigate(['group',id,'detail']);\n  }\n\n  public getPostsCount(groupId:number):number{    \n    return this.posts ? this.posts.filter((ele)=> ele.group.id == groupId).length : 0;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Post } from './../../post/shared/post.interface';\r\nimport { PostdataService } from './../../post/shared/postdata.service';\r\n@Injectable({ providedIn: 'root' })\r\nexport class GroupDataResolver implements Resolve<Post[]> {\r\n  constructor(private service: PostdataService) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<any>|Promise<any>|any {\r\n    return this.service.getPostList();\r\n  }\r\n}","import { AuthenticationGuard } from './../app/shared/authentication.guard';\r\nimport { FormComponent } from './form/form.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { RouterModule, Routes} from '@angular/router';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { GroupDataResolver } from './shared/GroupDataResolver';\r\n\r\nconst routes:Routes = [\r\n    {path:'group',component:ListComponent,resolve:{ posts:GroupDataResolver}},\r\n    {path:'group/:id/detail',component:DetailComponent, canActivate:[AuthenticationGuard], resolve:{ posts:GroupDataResolver}},\r\n    {path:'group/:type',component:FormComponent, canActivate:[AuthenticationGuard]},\r\n]\r\n\r\n\r\n@NgModule({\r\n    imports:[\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports:[RouterModule]\r\n})\r\n\r\nexport class GroupRoutingModule{}","import { HttpClientModule } from '@angular/common/http';\nimport { PostModule } from './../post/post.module';\nimport { GroupRoutingModule } from './group-routing.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DetailComponent } from './detail/detail.component';\nimport { FormComponent } from './form/form.component';\nimport { ListComponent } from './list/list.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { GroupDataService } from './shared/group.data.service';\n\n@NgModule({\n  declarations: [DetailComponent, FormComponent, ListComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    GroupRoutingModule,\n    PostModule,\n    HttpClientModule\n  ],\n  providers:[\n    GroupDataService\n  ]\n})\nexport class GroupsModule { }\n","import { DataService } from './../shared/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl} from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  registerForm:FormGroup;\n  loginForm:FormGroup;\n  registerView:boolean = false;\n  constructor(private service:DataService,private route:ActivatedRoute) {\n    this.route.params.subscribe(param => {\n      if(param['type'] == 'signup'){\n        this.registerView = true;\n      }else{\n        this.registerView = false;\n      }\n    });\n   }\n\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      username: new FormControl(),\n      email: new FormControl(),\n      password: new FormControl(),\n      password1: new FormControl()\n    });\n    \n    this.loginForm = new FormGroup({\n      username: new FormControl(),\n      password: new FormControl()\n    });\n  }\n\n  onRegister(form: FormGroup){\n    this.service.register(form.value.email, form.value.username, form.value.password, form.value.password1);\n  }\n\n  onLogin(form:FormGroup){\n    this.service.login(form.value.username,form.value.password);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.css']\n})\nexport class HomepageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { DataService } from './../shared/data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(private service: DataService) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { LoginComponent } from './login/login.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LogoutComponent } from './logout/logout.component';\n\nconst routes: Routes = [\n  {path: 'home', component: HomepageComponent},\n  {path:'logout', component: LogoutComponent},\n  {path: 'login',component: LoginComponent},\n  {path: '*', redirectTo: \"['/login',{'type':'login'}]\",pathMatch: 'full'},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{ useHash: true })],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n","import { DataService } from './shared/data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'simplesocial';\n  isAuthenticated:boolean = false;\n  constructor(private service:DataService){\n    this.isAuthenticated = service.Authorized();\n    \n  }\n  \n  ngOnInit(): void {\n    this.service.isUserLoggedIn.subscribe((data:boolean) => {\n      this.isAuthenticated = data;\n    })\n  }\n\n  \n  public logout(){\n    this.service.logout();\n  }\n}\n","import { PostModule } from '../post/post.module';\nimport { GroupsModule } from '../groups/groups.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { LoginComponent } from './login/login.component';\nimport { LogoutComponent } from './logout/logout.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomepageComponent,\n    LoginComponent,\n    LogoutComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    GroupsModule,\n    PostModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}